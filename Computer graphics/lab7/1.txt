#include <gl\glut.h>		// Заголовочный файл для GLu32 библиотеки
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h";
#define  PI  3.14159265359
#include <iostream>
#include <Windows.h>
#include <ctime>
#include <string>
using namespace std;

struct point {
	float x, y, z;
	point() : x(0), y(0), z(0) {};
	point(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {};
	friend std::ostream& operator<< (std::ostream& out, const point& p);
} a[10];
std::ostream& operator<< (std::ostream& out, const point& p) {
	out << "Point(" << p.x << ", " << p.y << ", " << p.z << ")";
	return out;
}
point count_normal(point p1, point p2, point p3) {
	point a, b, n;
	GLfloat l;
	a.x = p2.x - p1.x;
	a.y = p2.y - p1.y;
	a.z = p2.z - p1.z;
	b.x = p3.x - p1.x;
	b.y = p3.y - p1.y;
	b.z = p3.z - p1.z;
	n.x = (a.y * b.z) - (a.z * b.y);
	n.y = (a.z * b.x) - (a.x * b.z);
	n.z = (a.x * b.y) - (a.y * b.x);
	l = sqrt(n.x * n.x + n.y * n.y + n.z * n.z);
	n.x /= l;
	n.y /= l;
	n.z /= l;
	return n;
}
GLuint	texture[1];
GLvoid LoadGLTextures() {
	int x, y, n;
	unsigned char* data = stbi_load("3.bmp", &x, &y, &n, 0);
	glGenTextures(1, &texture[0]);
	glBindTexture(GL_TEXTURE_2D, texture[0]);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexImage2D(GL_TEXTURE_2D, 0, 3, x, y, 0,
		n == 3 ? GL_RGB : GL_RGBA, GL_UNSIGNED_BYTE, data);
	stbi_image_free(data);
	glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
}
double rotate_x = 0, rotate_y = 0;
unsigned int n = 9;
float radius = 0;
float zprism = 4;
float light_pos0[] = { 2, 4, 2, 1 };
float light_pos1[] = { 2, -4, 2, 1 };
float eyeX = 6, eyeY = 0, eyeZ = -0.5;
float minz = 1e10;
float zfloor = -2;
float h = 0;
int state = -1;
float g = 0.00002;
float acceleration = g, v = 0;
void calculate(float r) {
	radius = r;
	float segment = 2 * PI / n;
	for (int i = 0; i < n; i++) {
		float x = r * cos(i * segment);
		float y = r * sin(i * segment);
		a[i].x = x;
		a[i].y = y;
		a[i].z = r;
	};
	a[9] = a[0];

	float cosa = cos(rotate_x * PI / 180), cosb = cos(rotate_y * PI / 180), sina = sin(rotate_x * PI / 180), sinb = sin(rotate_y * PI / 180);
	for (int i = 0; i < n; i++) {
		minz = min(minz, -sinb * a[i].x + cosb * (sina * a[i].y + cosa * a[i].z));
	}
	for (int i = 0; i < n; i++) {
		minz = min(minz, -sinb * a[i].x + cosb * (sina * a[i].y + cosa * (a[i].z - 2 * radius)));
	}
}
void prism() {
	glBegin(GL_POLYGON);
	glNormal3f(0, 0, 1);
	for (int i = 0; i < n; i++) {
		glTexCoord2f(0.5 + a[i].x / radius * 0.5, 0.5 + a[i].y / radius * 0.5); glVertex3f(a[i].x, a[i].y, a[i].z);
	}
	glEnd();
	glBegin(GL_POLYGON);
	glNormal3f(0, 0, 1);
	for (int i = 0; i < n; i++) {
		glTexCoord2f(0.5 + a[i].x / radius * 0.5, 0.5 + a[i].y / radius * 0.5); glVertex3f(a[i].x, a[i].y, a[i].z - 2 * radius);
	}
	glEnd();
	for (int i = 0; i < n; i++) {
		point normal = count_normal(a[i], point(a[i].x, a[i].y, a[i].z - 2 * radius), a[i + 1]);
		glNormal3f(normal.x, normal.y, normal.z);
		glBegin(GL_QUADS);
		glTexCoord2f(0.0f, 0.0f); glVertex3f(a[i].x, a[i].y, a[i].z);
		glTexCoord2f(1.0f, 0.0f); glVertex3f(a[i].x, a[i].y, a[i].z - 2 * radius);
		glTexCoord2f(1.0f, 1.0f * sin(PI / n)); glVertex3f(a[i + 1].x, a[i + 1].y, a[i + 1].z - 2 * radius);
		glTexCoord2f(0.0f, 1.0f * sin(PI / n)); glVertex3f(a[i + 1].x, a[i + 1].y, a[i + 1].z);
		glEnd();
	}
}
void calc() {
	v += acceleration;
	h += v * state;
	if (h < zfloor - minz - zprism) {
		h = zfloor - minz - zprism;
		acceleration *= -1;
		state *= -1;
	}
	if (v < 0) {
		h = 0;
		acceleration *= -1;
		state *= -1;
	}
}
double prevTime = 0.0;
double crntTime = 0.0;
double timeDiff;
unsigned int counter = 0;
double res = 0;
int i = -5;
void display() {
	calc();
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(eyeX, eyeY, eyeZ,
		0, 0, 0,
		0, 0, 1);
	glLightfv(GL_LIGHT0, GL_POSITION, light_pos0);
	glLightfv(GL_LIGHT1, GL_POSITION, light_pos1);
	glColor3d(1, 1, 1);
	glBindTexture(GL_TEXTURE_2D, 0);
	glBegin(GL_QUADS);
		glVertex3f(-3, -5, zfloor);
		glVertex3f(3, -5, zfloor);
		glVertex3f(3, 5, zfloor);
		glVertex3f(-3, 5, zfloor);
	glEnd();
	glTranslatef(0, 0, zprism + h);
	glRotatef(15, 0, 0, 1); 
	glRotatef(rotate_x, 1, 0, 0); 
	glRotatef(rotate_y, 0, 1, 0);
	glBindTexture(GL_TEXTURE_2D, texture[0]);
	prism();

	
	crntTime = time(NULL);
	timeDiff = crntTime - prevTime;
	counter++;
	if (timeDiff >= 1.0 / 30.0) {
		if (i > 0) res += (1.0 / timeDiff) * counter;
		if (i == 10) {
			cout << res / 10;
			Sleep(3000000);
		}
		i++;
		std::string FPS = std::to_string((1.0 / timeDiff) * counter);
		std::string ms = std::to_string((timeDiff / counter) * 1000);
		std::string Tittle = FPS + "FPS/ " + ms + "ms/";
		glutSetWindowTitle(Tittle.c_str());
		prevTime = crntTime;
		counter = 0;
	}

	glutSwapBuffers();
}
void normalKeyFunction(unsigned char key, int x, int y) {
	switch (key) {
	case 'r':
		h = 0;
		acceleration = g;
		v = 0;
		state = -1;
		break;
	case 'a':
		eyeY -= 0.1;
		if (eyeY < -3) eyeY = -3;
		break;
	case 'd':
		eyeY += 0.1;
		if (eyeY > 3) eyeY = 3;
		break;
	case 's':
		eyeZ -= 0.1;
		if (eyeZ < -3) eyeZ = -3;
		break;
	case 'w':
		eyeZ += 0.1;
		if (eyeZ > 3) eyeZ = 3;
		break;
	}
	glutPostRedisplay();
}
void specialKeyFunction(int key, int x, int y) {
	switch (key) {
	case GLUT_KEY_LEFT:
		rotate_x -= 15;
		break;
	case GLUT_KEY_RIGHT:
		rotate_x += 15;
		break;
	case GLUT_KEY_DOWN:
		rotate_y += 15;
		break;
	case GLUT_KEY_UP:
		rotate_y -= 15;
		break;
	}
	minz = 1e10;
	float cosa = cos(rotate_x * PI / 180), cosb = cos(rotate_y * PI / 180), sina = sin(rotate_x * PI / 180), sinb = sin(rotate_y * PI / 180);
	for (int i = 0; i < n; i++) {
		minz = min(minz, -sinb * a[i].x + cosb * (sina * a[i].y + cosa * a[i].z));
	}
	for (int i = 0; i < n; i++) {
		minz = min(minz, -sinb * a[i].x + cosb * (sina * a[i].y + cosa * (a[i].z - 2 * radius)));
	}
	glutPostRedisplay();
}
void enableLight() {
	glShadeModel(GL_SMOOTH);
	glLightModelf(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);
	GLfloat material_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, material_diffuse);
	glEnable(GL_LIGHTING);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
	float diffuse0[] = { 0.2, 0.7, 0.4 };
	float diffuse1[] = { 0.2, 0.3, 0.8 };
	glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse0);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, diffuse1);
	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 0.5);
	glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.05);
	glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 0.05);
	glLightf(GL_LIGHT1, GL_CONSTANT_ATTENUATION, 0.5);
	glLightf(GL_LIGHT1, GL_LINEAR_ATTENUATION, 0.05);
	glLightf(GL_LIGHT1, GL_QUADRATIC_ATTENUATION, 0.05);
}
void initGL() {
	LoadGLTextures();	
	glEnable(GL_TEXTURE_2D);	
	glDepthFunc(GL_LESS);
	glEnable(GL_DEPTH_TEST);
	glMatrixMode(GL_MODELVIEW);
	calculate(1);
}
void reshape(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();	
	gluPerspective(90, w / h, 1, 100);
	glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH | GLUT_RGBA);
	glutInitWindowPosition(100, 100); 
	glutInitWindowSize(500, 500);
	glutCreateWindow("test");  
	initGL();
	glutDisplayFunc(display); 
	glutIdleFunc(display);
	glutReshapeFunc(reshape);
	glutSpecialFunc(specialKeyFunction);
	glutKeyboardFunc(normalKeyFunction);
	enableLight();

	glutMainLoop();
	return 0;
}